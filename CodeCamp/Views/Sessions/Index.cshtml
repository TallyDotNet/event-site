@using CodeCamp.Domain
@using CodeCamp.Domain.Model
@using CodeCamp.Infrastructure
@model CodeCamp.Domain.Infrastructure.Page<CodeCamp.Domain.Queries.SessionSummaryPage.Summary>
@{
    ViewInfo.Title = "Sessions";
}

<div class="jumbotron">
    <h1>Sessions</h1>
    <p class="lead">Browse and submit sessions.</p>
</div>

<ul class="media-list">
    @foreach(var summary in Model.Items) {
        <li class="media">
            <a class="pull-left" href="#">
                <img class="media-object avatar" src="@Avatar.GetUrl(summary.SubmitterEmail, 128)" alt="@summary.SubmitterName">
            </a>
            <div class="media-body">
                <h4 class="media-heading">
                    @summary.Name
                    
                     @if(State.UserIsAdmin() && summary.Status != SessionStatus.PendingApproval) {
                         <div class="pull-right">
                             @switch(@summary.Status) {
                                 case SessionStatus.Approved:
                                     <span class="label label-success">Approved</span>
                                     break;
                                 case SessionStatus.Rejected:
                                     <span class="label label-danger">Rejected</span>
                                     break;
                             }
                         </div>
                     }
                </h4>
                <div class="description">@summary.Description</div>
                <div>
                    <div class="presenter">Presented by @summary.SubmitterName</div>
                    
                    @if(State.UserIsAdmin() && summary.Status == SessionStatus.PendingApproval) {
                        var parameters = new {eventSlug = Event.SlugFromId(summary.Event_Id), sessionSlug = CodeCamp.Domain.Model.Session.SlugFromId(summary.Id)};
                        var approveAction = @Url.Action("Approve", "Sessions", parameters);
                        var rejectAction = @Url.Action("Reject", "Sessions", parameters);
                        
                        <div class="pull-right">
                            <form style="display: inline" method="POST" action="@approveAction">
                                <button class="btn btn-success">Approve</button>
                            </form>
                                
                            <form style="display: inline" method="POST" action="@rejectAction">
                                <button class="btn btn-danger">Reject</button>
                            </form>
                        </div>
                    }
                </div>
            </div>
        </li>
    }
</ul>

@if(Model.HasMultiplePages) {
    var eventSlug = Event.SlugFromId(Model.Items.First().Event_Id);

    <ul class="pager">
        @if(Model.HasPreviousPage) {
            <li>
                <a href="@Url.Action("Index", "Sessions", new {eventSlug, page = Model.PreviousPage})">Previous</a>
            </li>
        }
        
        @if(Model.HasNextPage) {
            <li>
                <a href="@Url.Action("Index", "Sessions", new {eventSlug, page = Model.NextPage})">Next</a>
            </li>
        }
    </ul>
}