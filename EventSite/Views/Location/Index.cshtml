@model EventSite.Domain.Model.Event
@{
    ViewInfo.Title = "Location";
}

<div class="jumbotron">
    <h1>@ViewInfo.Title</h1>
    <p class="lead">The <strong>where</strong> and <strong>when</strong> of @Model.Name.</p>
</div>

<div class="row">
    <div class="col-md-3">
        <div role="complementary">
            <ul class="sidenav nav">
                <li class="active">@Model.Venue.Name</li>
                @if(!string.IsNullOrEmpty(Model.Venue.Street1)) {
                    <li>@Model.Venue.Street1</li>
                }
                @if(!string.IsNullOrEmpty(Model.Venue.Street2)) {
                    <li>@Model.Venue.Street2</li>
                }
                <li>@Model.Venue.City, @Model.Venue.StateOrProvince</li>
                <li>@Model.Venue.Country @Model.Venue.PostalCode</li>
            </ul>
        </div>
        
        <div role="complementary">
            <ul class="sidenav nav">
                <li class="active">Parking</li>
                <li>@Model.Venue.ParkingInformation</li>
            </ul>
        </div>
        
        @if(!string.IsNullOrEmpty(Model.ScheduleSummary)) {
            <div role="complementary">
                <ul class="sidenav nav">
                    <li class="active">Schedule</li>
                    @foreach(var line in Model.ScheduleSummary.Split('\n')) {
                        <li>@line</li>
                    }
                </ul>
            </div>
        }
    </div>

    <div class="col-md-9" role="main">
        <div id="map"style="width:100%; height:480px;" />
    </div>
</div>

<script type="text/javascript" src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0"></script>
<script type="text/javascript">
    
    var map;
    var credentials = "@State.Settings.BingMapsAPIKey";
    var address = "@Model.Venue.Street1 @Model.Venue.Street2 @Model.Venue.City, @Model.Venue.StateOrProvince @Model.Venue.Country @Model.Venue.PostalCode";
    
    function geocodeCallback(result) {

        if (result &&
            result.resourceSets &&
            result.resourceSets.length > 0 &&
            result.resourceSets[0].resources &&
            result.resourceSets[0].resources.length > 0) {
           
            var bbox = result.resourceSets[0].resources[0].bbox;
            var viewBoundaries = Microsoft.Maps.LocationRect.fromLocations(new Microsoft.Maps.Location(bbox[0], bbox[1]), new Microsoft.Maps.Location(bbox[2], bbox[3]));
            map.setView({ bounds: viewBoundaries });

            
            var location = new Microsoft.Maps.Location(result.resourceSets[0].resources[0].point.coordinates[0], result.resourceSets[0].resources[0].point.coordinates[1]);
            var pushpin = new Microsoft.Maps.Pushpin(location);

            var infoBox = new Microsoft.Maps.Infobox(pushpin.getLocation(),
                {
                    title: "@Model.Venue.Name",
                    description: address,
                    visible: true,
                    offset: new Microsoft.Maps.Point(0, 15)
                });

            Microsoft.Maps.Events.addHandler(pushpin, 'click', function() { infoBox.setOptions({ visible: true }) });

            map.entities.push(pushpin);
            map.entities.push(infoBox);
        } else {
            alert('No resuilts were found for the venue location.');
        }
    }
    
    function startGeocoding() {
        
        var geocodeRequest = "http://dev.virtualearth.net/REST/v1/Locations?query=" + encodeURI(address) + "&output=json&jsonp=geocodeCallback&key=" + credentials;

        var script = document.createElement("script");
        script.setAttribute("type", "text/javascript");
        script.setAttribute("src", geocodeRequest);
        document.body.appendChild(script);
    }
    
    function loadMap() {
        map = new Microsoft.Maps.Map(document.getElementById("map"), { credentials: credentials });
        startGeocoding();
    }

    loadMap();
</script>