@model EventSite.Domain.Model.Event
@{
    ViewInfo.Title = "Location";
}

<div class="jumbotron">
    <h1>@ViewInfo.Title</h1>
    <p class="lead">The <strong>where</strong> and <strong>when</strong> of @Model.Name.</p>
</div>

<div class="row">
    <div class="col-md-3">
        <div role="complementary">
            <ul class="sidenav nav">
                <li class="active">@Model.Venue.Name</li>
                @if(!string.IsNullOrEmpty(Model.Venue.Street1)) {
                    <li>@Model.Venue.Street1</li>
                }
                @if(!string.IsNullOrEmpty(Model.Venue.Street2)) {
                    <li>@Model.Venue.Street2</li>
                }
                <li>@Model.Venue.City, @Model.Venue.StateOrProvince</li>
                <li>@Model.Venue.Country @Model.Venue.PostalCode</li>
            </ul>
        </div>
        
        <div role="complementary">
            <ul class="sidenav nav">
                <li class="active">Parking</li>
                <li>@Model.Venue.ParkingInformation</li>
            </ul>
        </div>
    </div>

    <div class="col-md-9" role="main">
        <div id="map"style="width:100%; height:480px;" />
    </div>
</div>

<script type="text/javascript" src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6.3"></script>
<script type="text/javascript">
    var map;
    var address = "@Model.Venue.Street1 @Model.Venue.Street2 @Model.Venue.City, @Model.Venue.StateOrProvince @Model.Venue.Country @Model.Venue.PostalCode";
    
    function geocodeCallback(shapeLayer, findResults, places, moreResults, errorMsg) {
        // if there are no results, display any error message and return
        if (places == null) {
            alert((errorMsg == null) ? "There were no results" : errorMsg);
            return;
        }

        var bestPlace = places[0];

        // Add pushpin to the *best* place
        var location = bestPlace.LatLong;
        var newShape = new VEShape(VEShapeType.Pushpin, location);

        newShape.SetDescription(address);
        newShape.SetTitle("@Model.Venue.Name");
        map.AddShape(newShape);
    }
    
    function startGeocoding() {
        map.Find(null,    // what
            address, // where
            null,    // VEFindType (always VEFindType.Businesses)
            null,    // VEShapeLayer (base by default)
            null,    // start index for results (0 by default)
            null,    // max number of results (default is 10)
            null,    // show results? (default is true)
            null,    // create pushpin for what results? (ignored since what is null)
            null,    // use default disambiguation? (default is true)
            null,    // set best map view? (default is true)
            geocodeCallback);  // call back function
    }
    
    function loadMap() {
        map = new VEMap("map");
        map.LoadMap();

        startGeocoding();
    }

    loadMap();
</script>